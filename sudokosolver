import tkinter as tk
from tkinter import messagebox

# Function to check if it's safe to place a number in a specific row, column, or subgrid
def is_safe(board, row, col, num):
    # Check row
    for x in range(9):
        if board[row][x] == num:
            return False
    # Check column
    for x in range(9):
        if board[x][col] == num:
            return False
    # Check 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if board[i + start_row][j + start_col] == num:
                return False
    return True

# Backtracking Sudoku solver function
def solve_sudoku(board):
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:  # Find an empty cell
                for num in range(1, 10):
                    if is_safe(board, row, col, num):
                        board[row][col] = num  # Place the number
                        if solve_sudoku(board):  # Recur
                            return True
                        board[row][col] = 0  # Backtrack
                return False
    return True

# Function to get the Sudoku puzzle from the Entry widgets
def get_board_from_entries():
    board = []
    for i in range(9):
        row = []
        for j in range(9):
            try:
                val = int(entries[i][j].get())
                if val < 0 or val > 9:
                    raise ValueError("Invalid value")
                row.append(val if val != 0 else 0)
            except ValueError:
                row.append(0)
        board.append(row)
    return board

# Function to update the Sudoku grid on the Tkinter interface
def update_entries(board):
    for i in range(9):
        for j in range(9):
            if board[i][j] != 0:
                entries[i][j].delete(0, tk.END)
                entries[i][j].insert(tk.END, str(board[i][j]))

# Function that runs the solver when the button is clicked
def solve():
    board = get_board_from_entries()
    if solve_sudoku(board):
        update_entries(board)
    else:
        messagebox.showinfo("No solution", "No solution exists!")

# Function to create the GUI interface
def create_gui():
    global entries
    root = tk.Tk()
    root.title("Sudoku Solver")

    entries = []
    for i in range(9):
        row = []
        for j in range(9):
            entry = tk.Entry(root, width=5, font=("Arial", 18), justify='center')
            entry.grid(row=i, column=j, padx=5, pady=5)
            row.append(entry)
        entries.append(row)

    solve_button = tk.Button(root, text="Solve", font=("Arial", 18), command=solve)
    solve_button.grid(row=9, column=0, columnspan=9, pady=10)

    root.mainloop()

# Run the GUI
create_gui()
